name: build_port_rom_stock-eu
on:
  workflow_dispatch:
    inputs:
      STOCK_URL:
        description: "待操作的底包/xiaomi.eu底包下载地址 | BASEROM DIRECT DOWNLOAD LINK(XIAOMI.EU or CN OFFICIAL ROM)"
        required: true
        default: 'https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/HyperOS-STABLE-RELEASES/HyperOS1.0/xiaomi.eu_PERIDOT_OS1.0.18.0.UNPCNXM_14.zip'
      PORT_URL:
        description: "待操作的移植包下载地址 | PORTROM DIRECT DOWNLOAD LINK(XIAOMI.EU OR CN OFFICIAL ROM)"
        required: true
        default: 'https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/HyperOS-STABLE-RELEASES/HyperOS2.0/xiaomi.eu_AURORA_OS2.0.13.0.VNACNXM_15.zip'
      PACK_TYPE:
        description: "打包类型（EXT/EROFS) | PACKING TYPE(EXT/EROFS), EROFS BY DEFAULT"
        default: EROFS
        type: choice
        options:
        - EROFS
        - EXT
        required: true
      ENCRYPTION:
        description: "是否解密data分区(TRUE/FALSE)，默认加密 | FBE DECRYPTION OR NOT, data encryption BY DEFAULT"
        default: FALSE
        required: false

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: 1. 最大化并挂载构建空间 | MAXIMIZE BUILD SPACE
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 8192
          root-reserve-mb: 20480
          temp-reserve-mb: 10240
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
      - name: 2. 检出仓库文件 | CHECKOUT REPOSITORY
        uses: actions/checkout@main
        with:
          ref: test
          fetch-depth: 1
      - name: 3. 准备环境 | PREPARE ENVIRONMENT
        run: |
          sudo apt install python3 aria2 zip p7zip-full zipalign android-sdk-libsparse-utils xmlstarlet
          sudo apt-get remove -y firefox zstd
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone/
          echo "${{ secrets.RCLONE_TOKEN }}" > token.txt
          base64 -d token.txt > ~/.config/rclone/rclone.conf
      - name: 4. 开始移植 | START PORTING
        run: |
          cd "$GITHUB_WORKSPACE"
          mkdir tmp
          zipfiles=$(find tmp -name "*.zip")
          for file in $zipfiles; do
            echo "Unzipping $file to devices folder" 
            unzip -o $file -d devices
          done
          if [[ ${{ github.event.inputs.PACK_TYPE }} == "EROFS" ]]; then
              sed -i "s/repack_with_ext4=true/repack_with_ext4=false/" bin/port_config
          fi
          if [[ ${{ github.event.inputs.ENCRYPTION }} == "TRUE" ]]; then
              sed -i "s/remove_data_encryption=false/remove_data_encryption=true/" bin/port_config
          fi
          sudo timedatectl set-timezone Asia/Shanghai
          java -version
          python3 --version
          sudo bash "$GITHUB_WORKSPACE"/setup.sh
          sudo bash "$GITHUB_WORKSPACE"/port.sh ${{ github.event.inputs.STOCK_URL }} ${{ github.event.inputs.PORT_URL }} 
          sudo zip -jr "$GITHUB_WORKSPACE"/config.zip "$GITHUB_WORKSPACE"/build/portrom/images/config
      - name: 5. -Prepare Upload
        run: |
          mkdir -p "$GITHUB_WORKSPACE"/GithubRelease
          cd "$GITHUB_WORKSPACE"/GithubRelease
          sudo split -b 1536M -d "$GITHUB_WORKSPACE"/zip/${{ env.rom_name }} ${{ env.rom_name }}
          cd "$GITHUB_WORKSPACE"
          touch file.log
          echo -e "底包版本: ${{ env.vendor_os_version }}\n底包安全补丁版本: ${{ env.vendor_security_patch }}\n底包基线版本: ${{ env.vendor_base_line}}\n\n移植包版本: ${{ env.port_os_version }}\n移植包安全补丁版本: ${{ env.port_security_patch }}\n移植包基线版本: ${{ env.port_base_line }}" > file.log
      - name: 6. -Upload to Github Release
        uses: ncipollo/release-action@main
        with:
          artifacts: ${{ github.workspace }}/GithubRelease/*
          name: ${{ env.port_os_version }}
          tag: ${{ env.port_os_version }}
          bodyFile: "${{ github.workspace }}/file.log"
          allowUpdates: true
          artifactErrorsFailBuild: true
